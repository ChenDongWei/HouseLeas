<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.houseleas.dao.EmployeeDao">
	
	<select id="login" parameterType="com.houseleas.entity.EmployeeModel" resultType="com.houseleas.entity.EmployeeModel">
		select emp.* from employee emp 
		<where>
			emp.user_code = #{employeeModel.userCode}
			and emp.password = #{employeeModel.password}
		</where> 
	</select>
	
	<select id="getEmployeeList" resultType="com.houseleas.entity.EmployeeModel">
		select emp.* from employee emp
		<where>
			<if test="userCode != null and userCode != ''">
				and emp.user_code like #{userCode}
			</if>
		</where>
		<if test="start != null and size != null">
				limit #{start}, #{size}
		</if>
	</select>
	
	<select id="getTotal" resultType="Long">
		select count(*) from employee
		<where>
			<if test="userCode != null and userCode != ''">
				and user_code like #{userCode}
			</if>
		</where>
	</select>
	
	<insert id="addEmployee" parameterType="com.houseleas.entity.EmployeeModel">
		insert into employee values(null,#{employee.userCode},#{employee.password},#{employee.name},
		#{employee.sex},#{employee.email},#{employee.phoneNumber})
	</insert>
	
	<update id="updateEmployee" parameterType="com.houseleas.entity.EmployeeModel">
		update employee
		<set>
			<if test="employee.userCode != null and employee.userCode != ''">
				user_code = #{employee.userCode},
			</if>
			<if test="employee.password != null and employee.password != ''">
				password = #{employee.password},
			</if>
			<if test="employee.trueName != null and employee.trueName != ''">
				name = #{employee.name},
			</if>
			<if test="employee.email != null and employee.email != ''">
				sex = #{employee.sex},
			</if>
			<if test="employee.phone != null and employee.phone != ''">
				email = #{employee.email},
			</if>
			<if test="employee.roleType != null and employee.roleType != ''">
				phone_number = #{employee.phoneNumber}
			</if>
		</set>
		<where>
			seq = #{employee.seq}
		</where>
	</update>
	
	<delete id="deleteEmployee" parameterType="Integer">
		delete from employee where seq in 
		<foreach collection="seqs" index="index" item="seq" open="(" separator="," close=")">
			#{seq}
		</foreach>
	</delete>
</mapper> 